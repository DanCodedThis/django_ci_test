name: Example CI Django + Postgres Tests

# Controls when the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add in environment variables for the entire "build" job
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost # default host value for the database
      POSTGRES_DB: djtesting
      POSTGRES_PORT: 5432
      DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
    services:
      postgres_main:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    # If you want to test multiple python version(s)
    strategy:
      matrix:
        python-version: [3.9]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          pip install -r requirements.txt
      - name: Run Tests
        # Step specific environment variables
        env:
          DEBUG: "0"
          DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DB_USERNAME: ${{ env.POSTGRES_USER }}
          DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DB_HOST: ${{ env.POSTGRES_HOST }}
          DB_DATABASE: ${{ env.POSTGRES_DB }}
          DB_PORT: ${{ env.POSTGRES_PORT }}
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
        run: |
          
          python manage.py test

#  custom-deploy:
    # The `needs` is added to bypass:
    # "Your account has reached its concurrent builds limit"
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      - name: Heroku login credentials
#        run: |
#          cat > ~/.netrc <<EOF
#            machine api.heroku.com
#              login $HEROKU_EMAIL
#              password $HEROKU_API_KEY
#            machine git.heroku.com
#              login $HEROKU_EMAIL
#              password $HEROKU_API_KEY
#          EOF
#        env:
#          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
#      - name: Add Heroku remote
#        run: heroku git:remote --app last-lecture
#        env:
#          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP }}
#      - name: Push to Heroku
#        run: git push heroku master
  deploy:

    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          buildpack: 'heroku/python'

      - name: Run database migrations
        run: |
          heroku run python manage.py migrate --app ${{secrets.HEROKU_APP}}

